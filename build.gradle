plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.5'
    id 'io.spring.dependency-management' version '1.1.4'
    id "com.github.spotbugs" version "5.1.3"
    id "jacoco"
    id "checkstyle"
}

group = 'example'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '21'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    implementation 'org.springframework.data:spring-data-jdbc'
    implementation 'com.h2database:h2'
    implementation 'org.springframework.boot:spring-boot-starter-security'
}
/**
 * Build SpotBugs
 */
apply from: 'gradle/build.spotbugs.gradle'

/**
 * Code quality
 **/
checkstyle {
    ignoreFailures = false
    maxErrors = 0
    maxWarnings = 0
    toolVersion = "9.2"
    sourceSets = [sourceSets.main]
    reportsDir = file("$project.buildDir/reports/checkstyle")
    configFile = file("$project.rootDir/config/checkstyle/checkstyle.xml")
}

checkstyleMain.source = "src/main/java"

test.finalizedBy jacocoTestReport

// Code quality tasks
task quality() {
    dependsOn "checkstyleMain", "spotbugsMain"
}
test.dependsOn quality
/**
 * Tests
 */
test {
    useJUnitPlatform()
    afterTest { desc, result ->
        logger.quiet "Running ${desc.className}.${desc.name}: ${result.resultType}"
    }
    testLogging {
        //events "passed", "skipped", "failed"
        showExceptions = true
        exceptionFormat = "full"
        showCauses = true
        showStackTraces = true
        showStandardStreams = false

        afterSuite { desc, result ->
            if (!desc.parent) {
                def output = "Result: ${result.resultType}, Total: ${result.testCount}, " +
                        "(Success: ${result.successfulTestCount} , Failure: ${result.failedTestCount}, Skipped: ${result.skippedTestCount})"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }

}

jacocoTestReport {
    reports {
        reports {
            xml.required = true
            html.required = true
        }
    }
    afterEvaluate {
        getClassDirectories().setFrom(
                files(classDirectories.files.collect {
                    fileTree(dir: it, includes: [
                            '**/example/cashcard/**/*'
                    ])
                }))
    }
}


//sourceSets.main.java.srcDirs = ['build/generated/src/main/java', 'src/main/java', 'build/proto', 'build/generated/source/proto/main']
//
///*********************
// * OpenAPI Model Generation Tasks
// *********************/
//openApiGenerate {
//    generatorName = "spring"
//    library = "spring-boot"
//    inputSpec = "$rootDir/documentation/OpenAPISpec/Digital-Checkout-Vehicle-Selection.yaml".toString()
//    outputDir = "$buildDir/generated".toString()
//    apiPackage = "com.sixt.service.digital_checkout.domain.api"
//    modelPackage = "com.sixt.service.digital_checkout.domain.contract"
//    templateDir = "$rootDir/src/main/resources/openapi-custom-template"
//    configOptions.set([
//            booleanGetterPrefix    : "is",
//            hideGenerationTimestamp: "true",
//            dateLibrary            : "java8",
//            // DelegatePattern attribute will work only when interfaceOnly attribute is set to false
//            delegatePattern        : "true",
//            openApiNullable        : "true",
//            interfaceOnly          : "false",
//            useSpringController    : "true",
//            useSpringBoot3         : "true",
//            useTags                : "true"
//    ])
//}
//
//tasks.openApiGenerate.dependsOn generateProto
//tasks.compileJava.dependsOn tasks.openApiGenerate